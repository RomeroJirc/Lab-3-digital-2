
Lab 3 Digital ESCLAVO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b46  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000873  00000000  00000000  00000f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b8  00000000  00000000  000017a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b0  00000000  00000000  00001e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b4  00000000  00000000  00002414  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_17>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	e8 00       	.word	0x00e8	; ????
  6a:	ef 00       	.word	0x00ef	; ????
  6c:	f6 00       	.word	0x00f6	; ????
  6e:	00 01       	movw	r0, r0
  70:	0a 01       	movw	r0, r20
  72:	14 01       	movw	r2, r8
  74:	1e 01       	movw	r2, r28

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a2 30       	cpi	r26, 0x02	; 2
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  96:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <initADC>:
 */ 

#include "ADC.h"

void initADC(void){
	ADMUX = 0;											//REINICIAR ADMUX
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
	ADMUX |= (1<<ADLAR);								//JUSTIFICACIÓN A LA IZQUIERDA
  a4:	80 81       	ld	r24, Z
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);								//REFERENCIA AVCC
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	
	DIDR0 |= (1<<ADC0D);								//DESHABILITAR PIN DIGITAL 0
  b0:	ee e7       	ldi	r30, 0x7E	; 126
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	80 83       	st	Z, r24
	DIDR0 |= (1<<ADC1D);								//DESHABILITAR PIN DIGITAL 1
  ba:	80 81       	ld	r24, Z
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 83       	st	Z, r24
	
	ADCSRA = 0;											//REINICIAR ADCSRA
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
	//ADCSRA |= (1<<ADIE);								//HABILITaR INTERRUPCIONES DE ADC
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);		//PRESCALER DE 128 ----> 125kHz
  c6:	80 81       	ld	r24, Z
  c8:	87 60       	ori	r24, 0x07	; 7
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <ADC_CHANEL_SELECT>:
	//ADCSRA |= (1<<ADEN);								//HABILITANDO EL ADC
}

uint8_t ADC_CHANEL_SELECT(uint8_t chanel){
	ADMUX = (ADMUX & 0xF0)|chanel;						//SEPARAR LOS VALORES DEL ADMUX DEL RESTO DEL REGISTRO
  ce:	ec e7       	ldi	r30, 0x7C	; 124
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	90 81       	ld	r25, Z
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	89 2b       	or	r24, r25
  d8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);								//HABILITANDO EL ADC
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);								//START CONVERSION
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 83       	st	Z, r24
	while ((ADCSRA)&(1<<ADSC));							//REPETIR HASTA QUE LA CONVERSION TERMINE
  ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ee:	86 fd       	sbrc	r24, 6
  f0:	fc cf       	rjmp	.-8      	; 0xea <ADC_CHANEL_SELECT+0x1c>
	return ADCH;										//RETORNAR EL ADCH
  f2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f6:	08 95       	ret

000000f8 <main>:
volatile uint8_t ValorADC1 = 0;
volatile uint8_t ValorADC2 = 0;

int main(void)
{
	cli();
  f8:	f8 94       	cli
    InitSPI(SPI_SLAVE_SS, SPI_DATA_ORDER_MSB, SPI_CLOCK_IDLE_LOW, SPI_CLOCK_FIRST_EDGE);
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	80 e4       	ldi	r24, 0x40	; 64
 102:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <InitSPI>
	initADC();
 106:	0e 94 4f 00 	call	0x9e	; 0x9e <initADC>
	SPCR |= (1<<SPIE);			//ACTIVAR ISR SPI
 10a:	8c b5       	in	r24, 0x2c	; 44
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	8c bd       	out	0x2c, r24	; 44
	sei();
 110:	78 94       	sei
    while (1) 
    {
		ValorADC1 = ADC_CHANEL_SELECT(0);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 67 00 	call	0xce	; 0xce <ADC_CHANEL_SELECT>
 118:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ValorADC1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	9c e9       	ldi	r25, 0x9C	; 156
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x28>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x2e>
 126:	00 00       	nop
		_delay_ms(10);
   		ValorADC2 = ADC_CHANEL_SELECT(1);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 67 00 	call	0xce	; 0xce <ADC_CHANEL_SELECT>
 12e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	8f e3       	ldi	r24, 0x3F	; 63
 134:	9c e9       	ldi	r25, 0x9C	; 156
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0x3e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x44>
 13c:	00 00       	nop
 13e:	e9 cf       	rjmp	.-46     	; 0x112 <main+0x1a>

00000140 <__vector_17>:
// ISR(ADC_vect){
// 	ValorADC = ADCH;
// 	ADCSRA |= (1<<ADIF);
// }

ISR(SPI_STC_vect){
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	7f 93       	push	r23
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
	uint8_t spiValor = SPDR;
 162:	8e b5       	in	r24, 0x2e	; 46
	if(spiValor == 99){
 164:	83 36       	cpi	r24, 0x63	; 99
 166:	29 f4       	brne	.+10     	; 0x172 <__vector_17+0x32>
		spiWrite(ValorADC1);
 168:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ValorADC1>
 16c:	0e 94 35 01 	call	0x26a	; 0x26a <spiWrite>
 170:	06 c0       	rjmp	.+12     	; 0x17e <__vector_17+0x3e>
	}

 	else if(spiValor == 100){
 172:	84 36       	cpi	r24, 0x64	; 100
 174:	21 f4       	brne	.+8      	; 0x17e <__vector_17+0x3e>
 		spiWrite(ValorADC2);
 176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17a:	0e 94 35 01 	call	0x26a	; 0x26a <spiWrite>
 }
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <InitSPI>:
 */ 

#include "SPI.h"

void InitSPI(Spi_Type sType, Spi_Data_Order sDataOrder, Spi_Clock_Polarity sClockPolarity, Spi_Clock_Phase sClockPhase)
{
 1a0:	e8 2f       	mov	r30, r24
	// PB2 -> D10 -> SS
	// PB3 -> D11 -> MOSI
	// PB4 -> D12 -> MISO
	// PB5 -> D13 -> SCK
	
	if(sType & (1<<MSTR))		// IF MASTER MODE
 1a2:	84 ff       	sbrs	r24, 4
 1a4:	52 c0       	rjmp	.+164    	; 0x24a <InitSPI+0xaa>
	{
		DDRB |= (1<<DDB3)|(1<<DDB5)|(1<<DDB2);		// MOSI, SCK, SS
 1a6:	84 b1       	in	r24, 0x04	; 4
 1a8:	8c 62       	ori	r24, 0x2C	; 44
 1aa:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1<<DDB4); 						//MISO
 1ac:	84 b1       	in	r24, 0x04	; 4
 1ae:	8f 7e       	andi	r24, 0xEF	; 239
 1b0:	84 b9       	out	0x04, r24	; 4
		SPCR |= (1<<MSTR);							//MASTER
 1b2:	8c b5       	in	r24, 0x2c	; 44
 1b4:	80 61       	ori	r24, 0x10	; 16
 1b6:	8c bd       	out	0x2c, r24	; 44
		
		uint8_t temp = sType & 0b00000111;
 1b8:	e7 70       	andi	r30, 0x07	; 7
		switch(temp){
 1ba:	8e 2f       	mov	r24, r30
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	87 30       	cpi	r24, 0x07	; 7
 1c0:	91 05       	cpc	r25, r1
 1c2:	08 f0       	brcs	.+2      	; 0x1c6 <InitSPI+0x26>
 1c4:	4b c0       	rjmp	.+150    	; 0x25c <InitSPI+0xbc>
 1c6:	fc 01       	movw	r30, r24
 1c8:	ec 5c       	subi	r30, 0xCC	; 204
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	0c 94 37 01 	jmp	0x26e	; 0x26e <__tablejump2__>
			case 0:	//DIV2
			SPCR &= ~((1<<SPR1)|(1<<SPR0));
 1d0:	8c b5       	in	r24, 0x2c	; 44
 1d2:	8c 7f       	andi	r24, 0xFC	; 252
 1d4:	8c bd       	out	0x2c, r24	; 44
			SPSR |= (1<<SPI2X);
 1d6:	8d b5       	in	r24, 0x2d	; 45
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	8d bd       	out	0x2d, r24	; 45
			break;
 1dc:	3f c0       	rjmp	.+126    	; 0x25c <InitSPI+0xbc>
			case 1:	//DIV4
			SPCR &= ~((1<<SPR1)|(1<<SPR0));
 1de:	8c b5       	in	r24, 0x2c	; 44
 1e0:	8c 7f       	andi	r24, 0xFC	; 252
 1e2:	8c bd       	out	0x2c, r24	; 44
			SPSR &= ~(1<<SPI2X);
 1e4:	8d b5       	in	r24, 0x2d	; 45
 1e6:	8e 7f       	andi	r24, 0xFE	; 254
 1e8:	8d bd       	out	0x2d, r24	; 45
			break;
 1ea:	38 c0       	rjmp	.+112    	; 0x25c <InitSPI+0xbc>
			case 2:	//DIV8
			SPCR |= (1<<SPR0);
 1ec:	8c b5       	in	r24, 0x2c	; 44
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	8c bd       	out	0x2c, r24	; 44
			SPCR &= ~(1<<SPR1);
 1f2:	8c b5       	in	r24, 0x2c	; 44
 1f4:	8d 7f       	andi	r24, 0xFD	; 253
 1f6:	8c bd       	out	0x2c, r24	; 44
			SPSR |= (1<<SPI2X);
 1f8:	8d b5       	in	r24, 0x2d	; 45
 1fa:	81 60       	ori	r24, 0x01	; 1
 1fc:	8d bd       	out	0x2d, r24	; 45
			break;
 1fe:	2e c0       	rjmp	.+92     	; 0x25c <InitSPI+0xbc>
			case 3:	//DIV16
			SPCR |= (1<<SPR0);
 200:	8c b5       	in	r24, 0x2c	; 44
 202:	81 60       	ori	r24, 0x01	; 1
 204:	8c bd       	out	0x2c, r24	; 44
			SPCR &= ~(1<<SPR1);
 206:	8c b5       	in	r24, 0x2c	; 44
 208:	8d 7f       	andi	r24, 0xFD	; 253
 20a:	8c bd       	out	0x2c, r24	; 44
			SPSR &= ~(1<<SPI2X);
 20c:	8d b5       	in	r24, 0x2d	; 45
 20e:	8e 7f       	andi	r24, 0xFE	; 254
 210:	8d bd       	out	0x2d, r24	; 45
			break;
 212:	24 c0       	rjmp	.+72     	; 0x25c <InitSPI+0xbc>
			case 4:	//DIV32
			SPCR &= ~(1<<SPR0);
 214:	8c b5       	in	r24, 0x2c	; 44
 216:	8e 7f       	andi	r24, 0xFE	; 254
 218:	8c bd       	out	0x2c, r24	; 44
			SPCR |= (1<<SPR1);
 21a:	8c b5       	in	r24, 0x2c	; 44
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	8c bd       	out	0x2c, r24	; 44
			SPSR |= (1<<SPI2X);
 220:	8d b5       	in	r24, 0x2d	; 45
 222:	81 60       	ori	r24, 0x01	; 1
 224:	8d bd       	out	0x2d, r24	; 45
			break;
 226:	1a c0       	rjmp	.+52     	; 0x25c <InitSPI+0xbc>
			case 5:	//DIV64
			SPCR &= ~(1<<SPR0);
 228:	8c b5       	in	r24, 0x2c	; 44
 22a:	8e 7f       	andi	r24, 0xFE	; 254
 22c:	8c bd       	out	0x2c, r24	; 44
			SPCR |= (1<<SPR1);
 22e:	8c b5       	in	r24, 0x2c	; 44
 230:	82 60       	ori	r24, 0x02	; 2
 232:	8c bd       	out	0x2c, r24	; 44
			SPSR &= ~(1<<SPI2X);
 234:	8d b5       	in	r24, 0x2d	; 45
 236:	8e 7f       	andi	r24, 0xFE	; 254
 238:	8d bd       	out	0x2d, r24	; 45
			break;
 23a:	10 c0       	rjmp	.+32     	; 0x25c <InitSPI+0xbc>
			case 6:	//DIV128
			SPCR |= ((1<<SPR1)|(1<<SPR0));
 23c:	8c b5       	in	r24, 0x2c	; 44
 23e:	83 60       	ori	r24, 0x03	; 3
 240:	8c bd       	out	0x2c, r24	; 44
			SPSR &= ~(1<<SPI2X);
 242:	8d b5       	in	r24, 0x2d	; 45
 244:	8e 7f       	andi	r24, 0xFE	; 254
 246:	8d bd       	out	0x2d, r24	; 45
			break;
 248:	09 c0       	rjmp	.+18     	; 0x25c <InitSPI+0xbc>
		}
	}
	else		//IF SLAVE MODE
	{
		DDRB |= (1<<DDB4);	//MISO
 24a:	84 b1       	in	r24, 0x04	; 4
 24c:	80 61       	ori	r24, 0x10	; 16
 24e:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~((1<<DDB3)|(1<<DDB5)|(1<<DDB2));	//MOSI, SCK, SS
 250:	84 b1       	in	r24, 0x04	; 4
 252:	83 7d       	andi	r24, 0xD3	; 211
 254:	84 b9       	out	0x04, r24	; 4
		SPCR &= ~(1<<MSTR);	//SLAVE
 256:	8c b5       	in	r24, 0x2c	; 44
 258:	8f 7e       	andi	r24, 0xEF	; 239
 25a:	8c bd       	out	0x2c, r24	; 44
	}
	//ENABLE DATA ORDER, CLOCK POLARITY, CLOCK PHASE
	SPCR |= (1<<SPE)|sDataOrder|sClockPolarity|sClockPhase;
 25c:	8c b5       	in	r24, 0x2c	; 44
 25e:	46 2b       	or	r20, r22
 260:	24 2b       	or	r18, r20
 262:	28 2b       	or	r18, r24
 264:	20 64       	ori	r18, 0x40	; 64
 266:	2c bd       	out	0x2c, r18	; 44
 268:	08 95       	ret

0000026a <spiWrite>:
	while (!(SPSR & (1<<SPIF)));	//WAIT FOR DATA RECIEVE COMPLETE
}*/

void spiWrite(uint8_t dat)		//WRITE DATA TO SPI BUS
{
	SPDR = dat;
 26a:	8e bd       	out	0x2e, r24	; 46
 26c:	08 95       	ret

0000026e <__tablejump2__>:
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	05 90       	lpm	r0, Z+
 274:	f4 91       	lpm	r31, Z
 276:	e0 2d       	mov	r30, r0
 278:	09 94       	ijmp

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
